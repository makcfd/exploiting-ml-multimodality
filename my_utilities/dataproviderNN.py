import pandas as pd
import numpy as np
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
import torch


class Data(Dataset):
    def __init__(self, X, y):
        # need to convert float64 to float32 else
        # will get the following error
        # RuntimeError: expected scalar type Double but found Float
        self.index = X.index.values
        X = X.values
        y = y.values
        self.X = torch.from_numpy(X.astype(np.float32))
        # need to convert float64 to Long else
        # will get the following error
        # RuntimeError: expected scalar type Long but found Float
        self.y = torch.from_numpy(y).type(torch.LongTensor)
        self.len = self.X.shape[0]

    def __getitem__(self, index):
        return self.X[index], self.y[index], self.index

    def __len__(self):
        return self.len


def get_data(
    directory: str,
    use_batch: bool = True,
    batch_size: int = 32,
) -> DataLoader:
    print("dataloader received info - directory: ", directory)
    print("dataloader received info - use_batch: ", use_batch)
    print("dataloader received info - batch_size: ", batch_size)
    X = pd.read_csv(directory + "X.csv", index_col=0)
    print("original X type is:", type(X))
    y = pd.read_csv(directory + "Y.csv", index_col=0)
    data = Data(X, y)
    if not use_batch:
        # use this option to predict on full slice of data
        batch_size = data.len
    loader = DataLoader(
        data,
        batch_size=batch_size,
        shuffle=False,
        # num_workers=num_workers,
    )
    return loader


# Below is test fixtures for this file
# DATASET_PATH = "/exploiting_model_multiplicity/data/"
# test_dir = DATASET_PATH + "adult_dataset" + "/" + "test/"
# # test_dir = DATASET_PATH + "adult_dataset" + "/" + "train/"
# testloader = get_data(test_dir, use_batch=False, batch_size=6)

# for data in testloader:
#     features, labels, index = data
# print(len(index))
# print(index[:10])
# for data in testloader:
#     features, labels, index = data
# print(len(index))
# print(index[:10])
