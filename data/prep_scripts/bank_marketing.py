import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

df = pd.read_csv(
    "/exploiting_model_multiplicity/data/original/bank-full.csv", sep=";"
)
df.drop_duplicates(inplace=True)

features = df.drop(["y"], axis=1)
target = df["y"]
# target value no/yes converting into 0/1so that target represents classic binary classification
target = target.replace("no", 0)
target = target.replace("yes", 1)
features = pd.get_dummies(features, drop_first=True)
numeric = ["age", "balance", "duration", "day", "pdays"]

X_train, X_test, Y_train, Y_test = train_test_split(
    features, target, train_size=0.8, test_size=0.2, random_state=42, shuffle=False
)
scaler_train = StandardScaler()
scaler_train.fit(X_train[numeric])
X_train[numeric] = scaler_train.transform(X_train[numeric])

scaler_test = StandardScaler()
scaler_test.fit(X_test[numeric])
X_test[numeric] = scaler_test.transform(X_test[numeric])
paths_to_save = ["../bank_marketing/train/", "../bank_marketing/test/"]
for path in paths_to_save:
    if not os.path.exists(path):
        os.makedirs(path)
X_train.to_csv("../bank_marketing/train/X.csv", index=True)
Y_train.to_csv("../bank_marketing/train/Y.csv", index=True)
X_test.to_csv("../bank_marketing/test/X.csv", index=True)
Y_test.to_csv("../bank_marketing/test/Y.csv", index=True)
