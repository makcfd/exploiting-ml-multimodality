import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

df = pd.read_csv(
    "/exploiting_model_multiplicity/data/original/IBM_HR_Employee_Attrition.csv"
)
df.drop_duplicates(inplace=True)
df.drop(
    ["Over18", "EmployeeNumber", "EmployeeCount", "StandardHours"], axis=1, inplace=True
)
features = df.drop(["Attrition"], axis=1)
target = df["Attrition"]
# target value no/yes converting into 0/1so that target represents classic binary classification
target = target.replace("No", 0)
target = target.replace("Yes", 1)
features = pd.get_dummies(
    features,
    columns=[
        "BusinessTravel",
        "Department",
        "EducationField",
        "JobRole",
        "MaritalStatus",
        "Education",
        "RelationshipSatisfaction",
        "StockOptionLevel",
        "TrainingTimesLastYear",
        "WorkLifeBalance",
        "EnvironmentSatisfaction",
        "JobInvolvement",
        "JobLevel",
        "JobSatisfaction",
        "NumCompaniesWorked",
    ],
)
numeric = [
    "Age",
    "DistanceFromHome",
    "YearsInCurrentRole",
    "YearsAtCompany",
    "YearsWithCurrManager",
    "YearsSinceLastPromotion",
    "TotalWorkingYears",
    "DailyRate",
    "HourlyRate",
    "MonthlyIncome",
    "MonthlyRate",
    "PercentSalaryHike",
]

label_encoder = LabelEncoder()
features["OverTime"] = label_encoder.fit_transform(features["OverTime"])
features["Gender"] = label_encoder.fit_transform(features["Gender"])
features["PerformanceRating"] = label_encoder.fit_transform(
    features["PerformanceRating"]
)

X_train, X_test, Y_train, Y_test = train_test_split(
    features, target, train_size=0.8, test_size=0.2, random_state=42, shuffle=False
)
scaler_train = StandardScaler()
scaler_train.fit(X_train[numeric])
X_train[numeric] = scaler_train.transform(X_train[numeric])

scaler_test = StandardScaler()
scaler_test.fit(X_test[numeric])
X_test[numeric] = scaler_test.transform(X_test[numeric])
paths_to_save = ["../ibm_attrition/train/", "../ibm_attrition/test/"]
for path in paths_to_save:
    if not os.path.exists(path):
        os.makedirs(path)
X_train.to_csv("../ibm_attrition/train/X.csv", index=True)
Y_train.to_csv("../ibm_attrition/train/Y.csv", index=True)
X_test.to_csv("../ibm_attrition/test/X.csv", index=True)
Y_test.to_csv("../ibm_attrition/test/Y.csv", index=True)
